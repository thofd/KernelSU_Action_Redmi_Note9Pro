name: 编译 gauguin SukiSU-Ultra 内核

on:
  push:
  workflow_dispatch:   # 允许手动触发
  
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: 🧩 初始化源码
      uses: actions/checkout@v3

    - name: 🛠️ 安装依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y git wget curl bc build-essential flex bison \
          libssl-dev libncurses5-dev libelf-dev ccache

    - name: 💥 拉取 AOSP Clang 工具链
      run: |
        mkdir clang && cd clang
        wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/master/clang-r450784d.tar.gz
        tar -xf clang-r450784d.tar.gz
        echo "CLANG_PATH=$(pwd)" >> $GITHUB_ENV

    - name: 💡 设置环境变量
      run: |
        echo "KERNEL_DIR=${{ github.workspace }}" >> $GITHUB_ENV
        echo "ARCH=arm64" >> $GITHUB_ENV
        echo "SUBARCH=arm64" >> $GITHUB_ENV
        echo "DEFCONFIG=vendor/gauguin_user_defconfig" >> $GITHUB_ENV

    - name: 🌐 拉取 SUSFS & KPM 模块
      run: |
        cd $KERNEL_DIR
        git clone https://github.com/tiann/susfs susfs
        git clone https://github.com/tiann/kpm kpm
        # 将源码手动集成到 kernel 中（假设你知道如何 merge 或 patch）
        # 你可以添加自己的 patch apply 脚本或用 patch 命令

    - name: 🔧 配置并编译内核
      run: |
        cd $KERNEL_DIR
        export PATH=$CLANG_PATH/bin:$PATH
        make O=out $DEFCONFIG
        make -j$(nproc) O=out \
          ARCH=arm64 \
          CROSS_COMPILE=aarch64-linux-gnu- \
          CC=clang \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          LLVM=1

    - name: 📦 准备 AnyKernel3 打包
      run: |
        cd $KERNEL_DIR
        git clone https://github.com/osm0sis/AnyKernel3.git
        cp out/arch/arm64/boot/Image AnyKernel3/
        cd AnyKernel3
        zip -r9 ../gauguin-SukiSU.zip *

    - name: 📤 上传产物
      uses: actions/upload-artifact@v4
      with:
        name: Kernel-Artifacts
        path: |
          out/arch/arm64/boot/Image
          gauguin-SukiSU.zip
